/*
 * DID API
 * DID API is a Core Service of the EBSI platform providing the capability of resolving EBSI Decentralized Identifiers (DIDs). 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package eu.europa.ec.edelivery.ebsi.did.entities;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import java.util.Objects;


@JsonPropertyOrder({
  PublicKey.JSON_PROPERTY_ID,
  PublicKey.JSON_PROPERTY_TYPE,
  PublicKey.JSON_PROPERTY_CONTROLLER,
  PublicKey.JSON_PROPERTY_PUBLIC_KEY_BASE58,
  PublicKey.JSON_PROPERTY_PUBLIC_KEY_PEM,
  PublicKey.JSON_PROPERTY_PUBLIC_KEY_JWK,
  PublicKey.JSON_PROPERTY_ETHEREUM_ADDRESS,
  PublicKey.JSON_PROPERTY_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-03-15T09:23:15.999421+01:00[Europe/Brussels]")
public class PublicKey {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_CONTROLLER = "controller";
  private String controller;

  public static final String JSON_PROPERTY_PUBLIC_KEY_BASE58 = "publicKeyBase58";
  private String publicKeyBase58;

  public static final String JSON_PROPERTY_PUBLIC_KEY_PEM = "publicKeyPem";
  private String publicKeyPem;

  public static final String JSON_PROPERTY_PUBLIC_KEY_JWK = "publicKeyJwk";
  private Object publicKeyJwk;

  public static final String JSON_PROPERTY_ETHEREUM_ADDRESS = "ethereumAddress";
  private String ethereumAddress;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;


  public PublicKey id(String id) {
    this.id = id;
    return this;
  }

   /**
   * URI that identifies the public key.
   * @return id
  **/

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public PublicKey type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Public key type. Registry of available key types https://w3c-ccg.github.io/ld-cryptosuite-registry/. 
   * @return type
  **/

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public PublicKey controller(String controller) {
    this.controller = controller;
    return this;
  }

   /**
   * DID that identifies the controller of the corresponding private key.
   * @return controller
  **/
   @JsonProperty(JSON_PROPERTY_CONTROLLER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getController() {
    return controller;
  }


  public void setController(String controller) {
    this.controller = controller;
  }


  public PublicKey publicKeyBase58(String publicKeyBase58) {
    this.publicKeyBase58 = publicKeyBase58;
    return this;
  }

   /**
   * Raw public key encoded in base58. Supported key types ed25519, secp256k1, secp256r1, Curve25519/X25519. 
   * @return publicKeyBase58
  **/
  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY_BASE58)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicKeyBase58() {
    return publicKeyBase58;
  }


  public void setPublicKeyBase58(String publicKeyBase58) {
    this.publicKeyBase58 = publicKeyBase58;
  }


  public PublicKey publicKeyPem(String publicKeyPem) {
    this.publicKeyPem = publicKeyPem;
    return this;
  }

   /**
   * RSA public key encoded in PEM.
   * @return publicKeyPem
  **/
  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY_PEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPublicKeyPem() {
    return publicKeyPem;
  }


  public void setPublicKeyPem(String publicKeyPem) {
    this.publicKeyPem = publicKeyPem;
  }


  public PublicKey publicKeyJwk(Object publicKeyJwk) {
    this.publicKeyJwk = publicKeyJwk;
    return this;
  }

   /**
   * Public key encoded as a JWK. Supported key types ed25519, secp256k1, secp256r1, Curve25519/X25519. 
   * @return publicKeyJwk
  **/
  @JsonProperty(JSON_PROPERTY_PUBLIC_KEY_JWK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getPublicKeyJwk() {
    return publicKeyJwk;
  }


  public void setPublicKeyJwk(Object publicKeyJwk) {
    this.publicKeyJwk = publicKeyJwk;
  }


  public PublicKey ethereumAddress(String ethereumAddress) {
    this.ethereumAddress = ethereumAddress;
    return this;
  }

  public PublicKey value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Valid Ethereum address. Key type secp256k1.
   * @return ethereumAddress
  **/
  @JsonProperty(JSON_PROPERTY_ETHEREUM_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEthereumAddress() {
    return ethereumAddress;
  }


  public void setEthereumAddress(String ethereumAddress) {
    this.ethereumAddress = ethereumAddress;
  }


  /**
   * Valid Ethereum address. Key type secp256k1.
   * @return value
   **/
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    this.value = value;
  }


  /**
   * Return true if this publicKey object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicKey publicKey = (PublicKey) o;
    return Objects.equals(this.id, publicKey.id) &&
        Objects.equals(this.type, publicKey.type) &&
        Objects.equals(this.controller, publicKey.controller) &&
        Objects.equals(this.publicKeyBase58, publicKey.publicKeyBase58) &&
        Objects.equals(this.publicKeyPem, publicKey.publicKeyPem) &&
        Objects.equals(this.publicKeyJwk, publicKey.publicKeyJwk) &&
        Objects.equals(this.value, publicKey.value) &&
        Objects.equals(this.ethereumAddress, publicKey.ethereumAddress);

  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, controller, publicKeyBase58, publicKeyPem, publicKeyJwk, ethereumAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicKey {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    controller: ").append(toIndentedString(controller)).append("\n");
    sb.append("    publicKeyBase58: ").append(toIndentedString(publicKeyBase58)).append("\n");
    sb.append("    publicKeyPem: ").append(toIndentedString(publicKeyPem)).append("\n");
    sb.append("    publicKeyJwk: ").append(toIndentedString(publicKeyJwk)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    ethereumAddress: ").append(toIndentedString(ethereumAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

